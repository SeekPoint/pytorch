https://www.cnblogs.com/rossiXYZ/p/15150504.html
PyTorch 分布式(2) --- 数据加载之DataLoader

目录
[源码解析] PyTorch 分布式(2) --- 数据加载之DataLoader
0x00 摘要
0x01 前情回顾
0x02 DataLoader
2.1 初始化
2.2 关键函数
2.3 单进程加载
2.3.1 区分生成
2.3.2 迭代器基类
2.3.3 单进程迭代器
2.3.4 获取样本
2.4 多进程加载
2.4.1 总体逻辑
2.4.2 初始化
2.4.3 业务重置
2.4.4 获取 index
2.4.5 worker主函数
2.4.6 Pin memory thread
2.4.7 用户获取data
2.4.8 小结
2.5 Pipleline
0xFF 参考

0x00 摘要
为了更好的介绍参数服务器Paracel的数据加载，我们临时插入两篇PyTorch的数据加载，主要是从分布式的角度进行切入。
本文只算是开胃甜点，后续会有专门系列分析PyTorch分布式。

参数服务器系列其他文章如下：

[源码解析] 机器学习参数服务器ps-lite 之(1) ----- PostOffice

[源码解析] 机器学习参数服务器ps-lite(2) ----- 通信模块Van

[源码解析] 机器学习参数服务器ps-lite 之(3) ----- 代理人Customer

[源码解析]机器学习参数服务器ps-lite(4) ----- 应用节点实现

[源码解析] 机器学习参数服务器 Paracel (1)-----总体架构

[源码解析] 机器学习参数服务器 Paracel (2)--------SSP控制协议实现

[源码解析] PyTorch 分布式(1) --- 数据加载之DistributedSampler

0x01 前情回顾
关于数据加载，上回书我们说到了 DistributedSampler，本文接下来就进行 DataLoader的分析。

为了更好说明，我们首先给出上文的流水线图，本文会对这个图进行细化。

                    +------------+
+--------+          |            |
|        |          | Process 1  |
| Data 1 +--------> |            +------+
|        |          | Load Data  |      |
+--------+          |            |      |
                    +------------+      |
                                        |
                                        |
                                        |
                    +------------+      |        +-----------------------------------+
+--------+          |            |      |        |                                   |
|        |          | Process 2  |      +------> | Pin-memory process                |
| Data 2 +--------> |            |               |                                   |
|        |          | Load Data  +-------------> |                                   |
+--------+          |            |               |        Transfer to Pinned Memory  |
                    +------------+       +-----> |                                   |
                                         |       |                                   |
                                         |       +-----------------------------------+
                                         |
+--------+          +------------+       |
|        |          |            |       |
| Data 3 +--------> | Process 3  +-------+
|        |          |            |
+--------+          | Load Data  |
                    |            |
                    +------------+

其次，我们再看看数据加载总体逻辑，具体如下图，简要说就是：
    DataSet 把数据集数目发给DistributedSampler。
    Sampler 按照某种规则生成数据indices并发送给DataLoader。
    DataLoader 依据indices来从DataSet之中加载数据（其内部的DataLoaderIter对象负责协调单进程/多进程加载Dataset）。
    DataLoader 把数据发给模型，进行训练。
+------------------------+                     +-----------+
|DistributedSampler      |                     |DataLoader |
|                        |     2 indices       |           |
|    Some strategy       +-------------------> |           |
|                        |                     |           |
|-------------+----------|                     |           |
              ^                                |           |  4 data  +-------+
              |                                |       -------------->+ train |
            1 | length                         |           |          +-------+
              |                                |           |
+-------------+----------+                     |           |
|DataSet                 |                     |           |
|        +---------+     |      3 Load         |           |
|        |  Data   +-------------------------> |           |
|        +---------+     |                     |           |
|                        |                     |           |
+------------------------+                     +-----------+
接下来，我们就正式进入 DataLoader。



。。。



2.4.8 小结
我们小结一下多进程逻辑。总体逻辑如下：

    主进程把需要获取的数据 index 放入index_queue。
    子进程从 index_queue 之中读取 index，进行数据读取，然后把读取数据的index放入worker_result_queue。
    主进程的 pin_memory_thread 会从 worker_result_queue 读取数据index，依据这个index进行读取数据，进行处理，把结果放入 data_queue。

具体流程如下图:

    1 在 _MultiProcessingDataLoaderIter 的初始化函数 __init__ 之中会进行初始化：

        配置，生成各种成员变量，配置各种queue。

        启动各个子进程。

        启动主进程中的pin_memory的线程。

        调用 _reset 函数，这是进一步完善业务初始化，也用来重置环境。
        上面已经启动了worker子进程，但是没有分配任务，所以reset函数会进行任务分配，预取。

    2 接下来是一个预取操作（在看下图中一定要留意）。
        1 _try_put_index 函数就是使用sampler获取下一批次的数据index。这里 _prefetch_factor 缺省值是 2，主要逻辑如下。

            使用 _next_index 从sampler获取下一批次的index。

            通过 _worker_queue_idx_cycle 找出下一个可用的工作worker，然后把index分给它。

            并且调整主进程的信息。

        2 拿到index之后，回到主线程。这里会进行数据提取。就是通过index_queue, data_queue与主进程交互。

            从 index_queue 获取新的数据index；

            如果没有设置本worker结束，就使用 fetcher获取数据。

            然后把数据放入data_queue，并且通知主进程，这里需要注意，data_queue是传入的参数，
            如果设置了pin memory，则传入的是 worker_result_queue，否则传入 data_queue。

    3 当用户迭代时，调用了Loader基类的 __next__ 函数 ，其调用 _next_data 从 DataLoader 之中获取数据。

        使用 _get_data 如何从 self._data_queue 中取数据。

        使用_process_data 设置下一次迭代的 index，即使用 _try_put_index，_next_index 来进行下一轮设置。

具体如下图：

user        _MultiProcessingDataLoaderIter   Sampler        Queue(index_queue)    Queue(data_queue)    _worker_loop     Fetcher
 +                       +                      +                  +                     +                  +              +
 |                       |                      |                  |                     |                  |              |
 |                       |                      |                  |                     |                  |              |
 |                       v                      |                  |                     |                  |              |
 |                   __init__                   |                  |                     |                  |              |
 |               1    _reset                    |                  |                     |                  |              |
 |                       +                      |                  |                     |                  |              |
 |                       |                      |                  |                     |                  |              |
 |                       |                      |                  |                     |                  |              |
 |                       v                      |                  |                     |                  |              |
 |            2   _try_put_index     next       |                  |                     |                  |              |
 |                  _next_index  +------------> |                  |                     |                  |              |
 |                       +                      |                  |                     |                  |              |
 |                       |  <-----------------+ |                  |                     |                  |              |
 |                       |           index      |                  |                     |                  |              |
 |                       |                      |                  |                     |                  |              |
 |                       | +------------------------------------>  |                     |                  |              |
 |                       |           put        |                  |                     |       get        |              |
 |                       |                      |                  +--------------------------------------> |              |
 |                       |                      |                  |                     |                  |    index     |
 |                       |                      |                  |                     |                  +------------> |
 |         next          |                      |                  |                     |                  | <----------+ |
 +---------------------> |                      |                  |                     | <----------------+    data      |
 |                       |                      |                  |                     |      data        |              |
 |                       +                      |                  |                     |                  |              |
 |                   _next_data                 |                  |                     |                  |              |
 |              3   _get_data          get      |                  |                     |                  |              |
 |                  _try_get_data  +-------------------------------------------------->  |                  |              |
 |                       +                      |                  |                     |                  |              |
 |                       |  <----------------------------------------------------------+ |                  |              |
 |                       |             data     |                  |                     |                  |              |
 |                       +                      |                  |                     |                  |              |
 |                   _process_data              |                  |                     |                  |              |
 |                  _try_put_index     next     |                  |                     |                  |              |
 |                  _next_index +-------------> |                  |                     |                  |              |
 |                       + <--------------------+                  |                     |                  |              |
 |                       |           index      |                  |                     |                  |              |
 |                       +---------------------------------------> |                     |       get        |              |
 | <-------------------+ |             put      |                  +------------------------------------->  |     index    |
 |        data           |                      |                  |                     |                  | +----------> |
 |                       |                      |                  |                     |                  +<-----------+ |
 v                       v                      v                  v                     v                  v     data     v

手机上如下： 02-02.png

2.5 Pipleline
至此，我们把之前的pipeline图进一步细化，具体如下：

                                                  +------------+
                              +--------+          |            |
                              |        |          | Process 1  |
                      +-----> | Data 1 +--------> |            +------+
                      |       |        |          | Load Data  |      |
                      |       +--------+          |            |      |
                      |                           +------------+      |
                      |                                               |
                      |                                               |
                      |                                               |
+----------------+    |                           +------------+      |                                          +-------------------------+
|Main process    |    |       +--------+          |            |      |                                          |  pin_memory_thread      |
|                |    |       |        |          | Process 2  |      +------>  +------------------------+       |                         |          +------------+
|  index_queue   +----------> | Data 2 +--------> |            |                |                        |       |                         |          |            |
|                |    |       |        |          | Load Data  +------------->  |  _worker_result_queue  +-----> |  Write to pinned memory +--------> | data_queue |
|                |    |       +--------+          |            |                |                        |       |                         |          |            |
+----------------+    |                           +------------+       +----->  |                        |       |                         |          +------------+
                      |                                                |        +------------------------+       |                         |
                      |                                                |                                         +-------------------------+
                      |                                                |
                      |       +--------+          +------------+       |
                      |       |        |          |            |       |
                      +-----> | Data 3 +--------> | Process 3  +-------+
                              |        |          |            |
                              +--------+          | Load Data  |
                                                  |            |
                                                  +------------+

手机如下：  02-03.png

至此，PyTorch 分布式的数据加载部分分析完毕，下一篇我们回归到 Paracel 如何处理数据加载。

0xFF 参考
卷积神经网络的并行化模型--One weird trick for parallelizing convolutional neural networks

AI框架中数据处理的挑战与解决思路

PyTorch 源码解读之 torch.utils.data：解析数据处理全流程

谈谈你对大规模机器学习这个领域的理解和认识?

Nvidia-DALI 从放弃到入门

pytorch(分布式)数据并行个人实践总结——DataParallel/DistributedDataParallel

Pytorch数据Pipeline设计总结

深度学习框架数据Pipeline设计

======================================
按支持数
   回复 引用#1楼 2023-06-14 11:16 uygnef
请问为什么开启pin memory不能直接写到pin memory的内存，而要先写到worker_result_queue再移到data_queue

支持(0) 反对(0)
   回复 引用#2楼 [楼主] 2023-06-19 23:53 罗西的思考
@uygnef
你好，这文章写了好久，很多细节很难回忆起来了，印象之中，这地方应该是为了解耦和统一加速。

